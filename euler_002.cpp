/*
 * File: euler_002.cpp
 * --------------------------
 * Finds the sum of the even-valued Fibonacci numbers less than MAX.
 */

#include <iostream>
#include <string>
#include "console.h"
using namespace std;

const int MAX = 4000000;

// don't end up using this--it's super inefficient...
int recFibNumber(int input) {
    // base case: input of 0 or 1 is defined to be 1
    if (input == 0 || input == 1) return 1;
    
    // recursive case: the fibonacci number is generated by adding the previous two terms.
    return recFibNumber(input - 1) + recFibNumber(input - 2);
}

int main() {
    int result = 0;
    int antipenultimate = 1;
    int penultimate = 1;
    
    int ultimate = 0;
    while (ultimate < MAX) {
        ultimate = antipenultimate + penultimate;
        if (ultimate % 2 == 0) result += ultimate;
        antipenultimate = penultimate;
        penultimate = ultimate;
    }
    
    cout << result << endl;
    
    return 0;
}
